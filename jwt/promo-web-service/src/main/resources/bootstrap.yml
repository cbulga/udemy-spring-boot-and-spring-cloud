# ==============================================================
# = Promo Prezzi Web Service - Versione Base
# ==============================================================

server:
  #port: 5091
  port: 509${seq}
# ==============================================================
# = Impostazione SSL
# ==============================================================
# SSL DISABILITATO PER ORA...
#  ssl:
#    enabled: true
#    key-store-type: PKCS12
#    key-store: classpath:ssl-server.jks
#    key-store-password: 123_Stella

spring:
  application:
    name: PromoPrezziWebService
  # ==============================================================
  # = Proprietà Config Server
  # ==============================================================
  cloud:
    config:
      # indirizzo riferimento config server
      uri: http://localhost:8888
      # profilo attivo
      profile: ${profilo}
      # branch git da usare da cui caricare la configurazione del config server
      #label: list3
      label: ${ramo}
      # username and password to authenticate into the config server
      username: user
      password: BimBumBam_2018
      # if fail-fast is true, the microservice will throw an exception during startup when it does not authenticate successfully in the config server
      fail-fast: true
      # timeout on waiting to connect to the Config Server
      request-connect-timeout: 5
      retry:
        # Maximum number of attempts of reconnect to the config server
        max-attempts: 10
        # Maximum interval for backoff (milliseconds to wait before retry to connect to the config server)
        max-interval: 1500
  # ==============================================================
  # = Proprietà RabbitMQ (necessario per ottenere la configurazione dal config server)
  # ==============================================================
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: rabbitmq
    password: rabbitmq
  # ==============================================================
  # = DBMS PostgreSQL Parameters
  # ==============================================================
  sql:
    init:
      mode: always
      platform: postgres
  datasource:
    password: 123_Stella
    url: jdbc:postgresql://localhost:5433/AlphaShop
    username: postgres
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
    show-sql: true
  # ==============================================================
  # = Redis Parameters
  # ==============================================================
  redis:
    connect-timeout: 2s
    host: localhost
    #password: password
    port: 6379
    timeout: 1s
  # ==============================================================
  # = Zipkin Parameters
  # ==============================================================
  zipkin:
    base-url: http://localhost:9411/
    sender:
      # invio eventi sincrono
      type: web
      # invio eventi asincrono
    #      type: rabbit
    message-timeout: 5

  # ==============================================================
  # = Sleuth Parameters
  # ==============================================================
  sleuth:
    sampler:
      # probability: varia da 1.0 a 0.0. 1.0: qualsiasi evento inserito nei log sarà anche inviato allo sleuth (ed inviato allo zipkin); 0.0 non invia nulla
      probability: 1.0
    # se true, genera un identificativo univoco per ogni richiesta di 128 bit; se falso ne genera uno da 64 bit
    trace-id128: false

# prese dal config server!!!
## ==============================================================
## = Actuator Parameters
## ==============================================================
#management:
##  info:
##    git:
##      mode: full
#  endpoint:
#    health:
#      show-details: WHEN_AUTHORIZED
#  endpoints:
#    web:
#      exposure:
#        include: health,info,metrics,refresh,bus-refresh,hystrix.stream
## ==============================================================
## = Actuator Info
## ==============================================================
#info:
#  assistenza:
#    nome: "Cristian Bulgarelli"
#    mail: "cristian.bulgarelli@gmail.com"
#    telefono: "3481234567"
#    orario: "9-18"
#  nome:
#    nome-app: "Promo Web Service"

# ==============================================================
# = Proprietà Livello Log
# = Default ERROR, WARN e INFO
# = Levels: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
# ==============================================================
logging:
  file:
    name: "/home/cristian/tmp/Udemy/spring-cloud-course/logs/PrezziPromoSrv.log"
  pattern:
    file: "%d{ dd-MM-yyyy HH:mm:ss.SSS } [%thread] %-5level %logger{36} - %msg%n"
    #    console: "%d{dd-MM-yyyy HH:mm:ss} - %msg%n"
    console: "%d{dd.MM.yyyy HH:mm:ss.SSS} %-5p - [%C]:%m%n"

  logback:
    rollingpolicy:
      max-file-size: 1MB
  # Livello del log generale
  level:
    root: WARN
    org:
      springframework:
        security: DEBUG
        cloud: DEBUG
#    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor: TRACE
#    org.hibernate.orm.jdbc.bind: TRACE # valido per stampare i parametri delle query con hibernate 6

    org.springframework.web: INFO
    com.xantrix.webapp: DEBUG
    com.hazelcast: INFO

# ==============================================================
# = Eureka Properties
# ==============================================================
eureka:
  # ==============================================================
  # = Impostazioni Instance
  # ==============================================================
  instance:
    # intervallo di attesa prima della rimozione del servizio (def 90 sec)
    lease-expiration-duration-in-seconds: 60
    # intervallo di invio dell'heartbeat (def 30 sec)
    leaseRenewalIntervalInSeconds: 15
    # id di identificazione dell'istanza
    #    instanceId: ${server.port}-${spring.application.name}-${seq}
    instanceId: ${server.port}-${spring.application.name}
    # registrazione per indirizzo ip (defualt hostname)
    preferIpAddress: true
  # ==============================================================
  # = Impostazioni Client
  # ==============================================================
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      # BimBumBam_2018: password specified in the eurekasrv => bootstrap.yml => sicurezza.userpwd parameter (decoded value is BimBumBam_2018)
      defaultZone: ${EUREKA_URL:http://user:BimBumBam_2018@localhost:8761/eureka/}
    # time out di connessione in secondi al server Eureka (def 5 sec)
    eureka-server-connect-timeout-seconds: 8