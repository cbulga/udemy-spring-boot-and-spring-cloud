# ==============================================================
# = PriceArt Web Service con Autenticazione JWT
# ==============================================================
server:
  #port: 5071
  port: 507${seq}

spring:
  application:
    name: PriceArtWebService
  # ==============================================================
  # = Proprietà Config Server
  # ==============================================================
  cloud:
    config:
      # indirizzo riferimento config server
      uri: http://localhost:8888
      # profilo attivo
      profile: ${profilo}
      # branch git da usare da cui caricare la configurazione del config server
      #label: list3
      label: ${ramo}
      # username and password to authenticate into the config server
      username: user
      password: BimBumBam_2018
      # if fail-fast is true, the microservice will throw an exception during startup when it does not authenticate successfully in the config server
      fail-fast: true
      # timeout on waiting to connect to the Config Server
      request-connect-timeout: 5
      retry:
        # Maximum number of attempts of reconnect to the config server
        max-attempts: 10
        # Maximum interval for backoff (milliseconds to wait before retry to connect to the config server)
        max-interval: 1500
  # ==============================================================
  # = Proprietà RabbitMQ
  # ==============================================================
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: rabbitmq
    password: rabbitmq
  # ==============================================================
  # = Proprietà Fonte Dati PostgreSQL
  # ==============================================================
  datasource:
    password: 123_Stella
    url: jdbc:postgresql://localhost:5433/AlphaShop
    username: postgres
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          lob:
            non_contextual_creation: true
        format_sql: true
    show-sql: true
  sql:
    init:
      mode: always
      platform: postgres

# Actuator Parameters e Actuator Info arrivano dal config-server
## ==============================================================
## = Actuator Parameters
## ==============================================================
#management:
#  endpoint:
#    health:
#      show-details: WHEN_AUTHORIZED
#  endpoints:
#    web:
#      exposure:
#        include: health,info,metrics,refresh,bus-refresh
#
## ==============================================================
## = Actuator Info
## ==============================================================
#info:
#  assistenza:
#    nome: "Cristian Bulgarelli"
#  nome:
#    nome-app: "PriceArt Web Service - Versione Autenticazione OAuth2 (Keycloak)"

# ==============================================================
# = Parametri Sicurezza OAUTH2 con KeyCloack
# ==============================================================
keycloak:
  auth-server-url: http://localhost:8080
  realm: Alphashop
  resource: Articoli-Web-Service
  public-client: true

# ==============================================================
# = Proprietà Livello Log
# = Default ERROR, WARN e INFO
# = Levels: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
# ==============================================================
logging:
  file:
    name: "/home/cristian/tmp/Udemy/spring-cloud-course/logs/ArtSrv.log"
  pattern:
    file: "%d{ dd-MM-yyyy } [%thread] %-5level %logger{36} - %msg%n"
    #    console: "%d{dd-MM-yyyy HH:mm:ss} - %msg%n"
    console: "%d{dd.MM.yyyy HH:mm:ss.SSS} %-5p - [%C]:%m%n"

  logback:
    rollingpolicy:
      max-file-size: 1MB
  # Livello del log generale
  level:
    root: INFO
    #    com:
    #      xantrix:
    #        DEBUG
    org.springframework.security: WARN
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.springframework.web: WARN
    com.xantrix.webapp: DEBUG
    com.hazelcast: DEBUG
#    org.springframework: DEBUG

# ==============================================================
# = Eureka Properties
# ==============================================================
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: ${EUREKA_URL:http://localhost:8761/eureka/}